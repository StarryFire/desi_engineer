version: "3"
name: desi_engineer

services:
  ################################################# DYNAMIC NGINX PROXY + SSL CONFIGURATION #########################################################################################
  private-nginx:
    container_name: private-nginx
    image: desiengineer/private-nginx:latest
    build:
      context: ../../
      dockerfile: ./deployment/services/nginx/Dockerfile
      args:
        # Sets the uid and gid of the nginx user inside the container that runs the nginx workers
        NGINX_UID: 1000
        NGINX_GID: 1000
    volumes:
      - private_nginx_confd:/etc/nginx/conf.d
      - private_nginx_vhostd:/etc/nginx/vhost.d
      - private_nginx_html:/usr/share/nginx/html
      - private_nginx_certs:/etc/nginx/certs:ro

      # tailscale-nginx-auth socket from tailscale-nginx-auth container
      - tailscale_nginx_auth_run:/run/tailscale.nginx-auth

      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/configs:/etc/nginx/configs
      - ./nginx/njs:/etc/nginx/njs
    # this causes tailscale and nginx to share the same network stack, with tailscale on top of nginx
    # this essentially means that nginx container is running inside tailscale container from a network's perspective
    network_mode: service:tailscale
    depends_on:
      - grafana
    labels:
      logging: "promtail"
      logging_jobname: "docker_compose_logs"

  private-docker-gen:
    environment:
      # can cause issues in some setups, hence always hash the upstream name
      - SHA1_UPSTREAM_NAME=true
    container_name: private-docker-gen
    image: nginxproxy/docker-gen:latest
    command: -notify-sighup private-nginx -watch /etc/docker-gen/templates/default.conf.dtmpl /etc/nginx/conf.d/default.conf
    volumes_from:
      - private-nginx
    volumes:
      - ./nginx/private/templates:/etc/docker-gen/templates:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - private-nginx
    networks:
      - private-1
    labels:
      logging: "promtail"
      logging_jobname: "docker_compose_logs"

  ##################################################################### TAILSCALE VPN ######################################################################################
  # services that are supposed to be behind tailscale are still exposed to the internet if you don't separate the proxy into public-proxy and private-proxy and hence this.
  #
  # However, even if grafana gets exposed to the internet, nginx internal /auth will block any attempts to access it with a 401 since the request is not
  # coming via tailscale.
  #
  # Ref: 
  # - https://www.reddit.com/r/Tailscale/comments/15f8cbc/comment/kaozlvy/?utm_source=share&utm_medium=web2x&context=3
  # - https://hub.docker.com/r/tailscale/tailscale (bottom, FAQ section)
  # There are two modes in tailscale:
  # Userspace Networking: In this mode, the tailscale container can accept incoming connections but cannot initiate outgoing connections to other tailscale hosts (via other processes)
  # for eg. only "tailscale ping 100.127.254.120" would work and not "ping 100.127.254.120" i.e. only pings initiated via the tailscale process to other tailscale hosts would work.
  # Also MagicDNS resolution won't work either in the above mode.
  # Kernel Networking: In this mode, the above problems are solved.
  tailscale:
    env_file:
      - ../secrets/docker/tailscale.txt
    environment:
      TS_HOSTNAME: desi-engineer-1
      TS_AUTH_ONCE: true
      TS_STATE_DIR: /var/lib/tailscale
      # So that you can connect to other tailscale hosts from containers via the tailscale container
      # eg. curl -x tailscale:1055 https://desi-engineer-1.tail76efa.ts.net/api/health
      TS_OUTBOUND_HTTP_PROXY_LISTEN: "0.0.0.0:1055" # supports only http/https protocols
      #
      # curl --socks5-hostname tailscale:1055 https://desi-engineer-1.tail76efa.ts.net/api/health
      # TS_SOCKS5_SERVER: "0.0.0.0:1055" # supports more protocols
      TS_ACCEPT_DNS: true
      TS_USERSPACE: false # needed for kernel networking mode
    cap_add:
      - net_admin # needed for kernel networking mode
      - sys_module # needed for kernel networking mode
    container_name: tailscale
    image: tailscale/tailscale:latest
    healthcheck:
      test: ["CMD-SHELL", "tailscale status"]
      interval: 1s
      timeout: 5s
      retries: 60
    volumes:
      - tailscale_run:/var/run/tailscale # contains tailscale socket pointer
      - tailscale_tmp:/tmp # contains actual tailscale socket
      - tailscale_lib:/var/lib/tailscale

      - /dev/net/tun:/dev/net/tun # needed for kernel networking mode
    networks:
      - private-1

  # Ref: https://tailscale.com/blog/grafana-auth, https://tailscale.com/blog/tailscale-auth-nginx
  tailscale-nginx-auth:
    container_name: tailscale-nginx-auth
    image: desiengineer/tailscale-nginx-auth:latest
    build:
      context: ../../
      dockerfile: ./deployment/services/tailscale_nginx_auth/Dockerfile
      args:
        # Sets the uid and gid of the nginx user inside the container that runs the nginx workers
        NGINX_UID: 1000
        NGINX_GID: 1000
    volumes:
      - tailscale_nginx_auth_run:/run/tailscale.nginx-auth # contains tailscle-nginx-auth socket

      - tailscale_run:/var/run/tailscale # contains hard link to actual tailscale socket
      - tailscale_tmp:/tmp # contains the actual tailscale socket
    networks:
      - private-1
    depends_on:
      - tailscale
